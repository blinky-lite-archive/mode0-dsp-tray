[
    {
        "id": "fc714a7ef7d3c130",
        "type": "tab",
        "label": "blinky-rpmode0-dsp-tray",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8a9252872fb4fd5",
        "type": "tab",
        "label": "WebApp",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8341090a.df9758",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "00241d84aa298f73"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFAAAA",
        "icon": "font-awesome/fa-cloud"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "44b51478.9c022c",
        "type": "websocket-listener",
        "path": "/blinky-rpmode0-dsp/websocket",
        "wholemsg": "false"
    },
    {
        "id": "00241d84aa298f73",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .danger-card\n        {\n          background-color: yellow !important;\n          text-align: center;\n        }\n        .danger-card-body\n        {\n          background-color: yellow;\n        }\n        .danger-card-button\n        {\n          color: yellow !important;\n          background-color: red !important;\n          font-weight: bold;\n        }\n        .danger-card-title\n        {\n          color: red;\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .danger-card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n        .googleSlide4by3-container \n        {\n            position: relative;\n            overflow: hidden;\n            padding-top: 75.0%;\n        }\n        .googleSlide4by3-iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: 0;\n        }        \n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "8b1b1ae581d103d9"
            ]
        ]
    },
    {
        "id": "8b1b1ae581d103d9",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <img src=\"/img/bl-mc-icon-inverse.png\" height=\"75px\"/>\n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/apps'><img src=\"/img/appsYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "aa55df662ee9abf1"
            ]
        ]
    },
    {
        "id": "274cfda7679f72f2",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1370,
        "y": 80,
        "wires": [
            [
                "047c62aa77e0592a"
            ]
        ]
    },
    {
        "id": "c550163cc649c519",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 950,
        "y": 80,
        "wires": [
            [
                "1ae046424a3f7c07"
            ]
        ]
    },
    {
        "id": "2bf1933e15f344a7",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "c550163cc649c519"
            ]
        ]
    },
    {
        "id": "047c62aa77e0592a",
        "type": "http response",
        "z": "8341090a.df9758",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1490,
        "y": 80,
        "wires": []
    },
    {
        "id": "963ebd0f5a6f6ddf",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 690,
        "y": 80,
        "wires": [
            [
                "2bf1933e15f344a7"
            ]
        ]
    },
    {
        "id": "aa55df662ee9abf1",
        "type": "function",
        "z": "8341090a.df9758",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 80,
        "wires": [
            [
                "963ebd0f5a6f6ddf"
            ]
        ]
    },
    {
        "id": "1ae046424a3f7c07",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "01b447bebf70c342"
            ]
        ]
    },
    {
        "id": "01b447bebf70c342",
        "type": "function",
        "z": "8341090a.df9758",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 80,
        "wires": [
            [
                "274cfda7679f72f2"
            ]
        ]
    },
    {
        "id": "1dbf0b4d0884456b",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Save device config in Memory",
        "func": "msg.payload.settingInProgress = 1;\nglobal.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "5502095eee47e779"
            ]
        ]
    },
    {
        "id": "82d85d31875ae660",
        "type": "inject",
        "z": "fc714a7ef7d3c130",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "ea2bda3a2d48f831"
            ]
        ]
    },
    {
        "id": "5f5f0f13dabab6db",
        "type": "file in",
        "z": "fc714a7ef7d3c130",
        "name": "Read device config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 490,
        "y": 60,
        "wires": [
            [
                "e59532cc9fb3bcb5"
            ]
        ]
    },
    {
        "id": "e59532cc9fb3bcb5",
        "type": "json",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "1dbf0b4d0884456b"
            ]
        ]
    },
    {
        "id": "ea2bda3a2d48f831",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n    configFile  :   mqttSplit[1] + '-' + mqttSplit[2] + '.json',\n    mapFile     :   mqttSplit[1] + '-' + mqttSplit[2] + '-map.json'\n};\nglobal.set('deviceProps',deviceProps);\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "5f5f0f13dabab6db"
            ]
        ]
    },
    {
        "id": "d7cfae5dedb833b9",
        "type": "file",
        "z": "fc714a7ef7d3c130",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1190,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d69ea66c02bf4a9f",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Save Settings to File",
        "func": "var jsonPretty = JSON.stringify(global.get('device'),null,2);\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':global.get('deviceProps').configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "d7cfae5dedb833b9"
            ]
        ]
    },
    {
        "id": "09c2e8c5be726aa1",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "Device A web socket in",
        "links": [
            "468560f300303ae4"
        ],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "f8855d6f7b4a2d66"
            ]
        ]
    },
    {
        "id": "4a32d6bc7f2733ad",
        "type": "json",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "468cc6b861fe92a6"
            ]
        ]
    },
    {
        "id": "763e993c4a211e18",
        "type": "exec",
        "z": "fc714a7ef7d3c130",
        "command": "pm2 restart ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart",
        "x": 700,
        "y": 1460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "125759052253fbf7",
        "type": "switch",
        "z": "fc714a7ef7d3c130",
        "name": "Reset Tray",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "5a4c5866bec23443"
            ],
            [
                "5955c35da3b4c8b3"
            ]
        ]
    },
    {
        "id": "5955c35da3b4c8b3",
        "type": "exec",
        "z": "fc714a7ef7d3c130",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 500,
        "y": 1580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b888285806aa88bd",
        "type": "delay",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "125759052253fbf7"
            ]
        ]
    },
    {
        "id": "8910365837ba1b21",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Prepare MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "7ac9b7947c52a846"
            ]
        ]
    },
    {
        "id": "7ac9b7947c52a846",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Device A web socket out",
        "mode": "link",
        "links": [
            "9badb025c96f9f01"
        ],
        "x": 1315,
        "y": 260,
        "wires": []
    },
    {
        "id": "9a228e0adf30e98d",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "New Setting In",
        "links": [
            "35af9d0d393383db"
        ],
        "x": 755,
        "y": 140,
        "wires": []
    },
    {
        "id": "35af9d0d393383db",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "blinkybus setting in",
        "links": [
            "9a228e0adf30e98d"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "6e3c2a40692c9615"
            ]
        ]
    },
    {
        "id": "04ef56eea3ce5457",
        "type": "switch",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 160,
        "wires": [
            [
                "9a228e0adf30e98d"
            ],
            [
                "ceecf1e1066de43d"
            ],
            [
                "cc968758c56998fe"
            ],
            [
                "68b6d779d98136e6"
            ]
        ]
    },
    {
        "id": "468cc6b861fe92a6",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "04ef56eea3ce5457"
            ]
        ]
    },
    {
        "id": "f9560205de99e05d",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Shift Msg",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "2adf06457508d99a"
            ]
        ]
    },
    {
        "id": "2adf06457508d99a",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Filter Websocket",
        "func": "var inputDeviceProps = msg.payload.topic.split('/');\nvar deviceProps = global.get('deviceProps')\nif (inputDeviceProps[0] != deviceProps.project) return null;\nif (inputDeviceProps[1] != deviceProps.deviceType) return null;\nif (inputDeviceProps[2] != deviceProps.name) return null;\nreturn {topic:msg.topic, payload:msg.payload.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "04ef56eea3ce5457"
            ]
        ]
    },
    {
        "id": "f8855d6f7b4a2d66",
        "type": "json",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "f9560205de99e05d"
            ]
        ]
    },
    {
        "id": "502890a6eef6ab45",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Publish device",
        "func": "if (!msg.payload) return null;\nvar device = global.get('device');\nvar newMsg = \n{\n    topic: global.get('deviceProps').project + '/' + global.get('deviceProps').deviceType + '/' + global.get('deviceProps').name + '/reading',\n    payload: JSON.stringify(device)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "8910365837ba1b21",
                "5804018e81fd87a6"
            ]
        ]
    },
    {
        "id": "646fa4e3e8a44ef2",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "Publish Device In",
        "links": [
            "34be1cac9a79dec1",
            "ceecf1e1066de43d",
            "5205ea3ffe7e0431",
            "abdd37c2f412350b",
            "d3aa6fd2c11c5ba5",
            "a7ab779c518cf1f2",
            "34c3c3d0e79bb93a",
            "6ade9e39ae541696",
            "d433a4af56090639",
            "4bab782ef6b8962f"
        ],
        "x": 835,
        "y": 220,
        "wires": [
            [
                "502890a6eef6ab45"
            ]
        ]
    },
    {
        "id": "ceecf1e1066de43d",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Ping Out",
        "links": [
            "646fa4e3e8a44ef2"
        ],
        "x": 755,
        "y": 180,
        "wires": []
    },
    {
        "id": "5205ea3ffe7e0431",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Create Setting out",
        "links": [
            "646fa4e3e8a44ef2"
        ],
        "x": 315,
        "y": 380,
        "wires": []
    },
    {
        "id": "fafc4717b4f07a59",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Pause Device readings",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 520,
        "wires": [
            [
                "6e82293266215924",
                "d3aa6fd2c11c5ba5"
            ]
        ]
    },
    {
        "id": "cc968758c56998fe",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Config Out",
        "links": [
            "184437d7312bb950"
        ],
        "x": 755,
        "y": 220,
        "wires": []
    },
    {
        "id": "184437d7312bb950",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "Pause Device Readings in",
        "links": [
            "cc968758c56998fe"
        ],
        "x": 55,
        "y": 520,
        "wires": [
            [
                "fafc4717b4f07a59"
            ]
        ]
    },
    {
        "id": "6e82293266215924",
        "type": "delay",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 520,
        "wires": [
            [
                "84754d58522f0c22"
            ]
        ]
    },
    {
        "id": "84754d58522f0c22",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Save config file",
        "func": "global.set('device',JSON.parse(JSON.stringify(msg.payload)));\nvar device = global.get('device');\ndevice.settingInProgress = 1;\n\nreturn {topic:'deviceConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "b2be601ae02563d0",
                "2aa20fd7e206759f"
            ]
        ]
    },
    {
        "id": "b2be601ae02563d0",
        "type": "delay",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 520,
        "wires": [
            [
                "c08915bcbfd8d0af"
            ]
        ]
    },
    {
        "id": "c08915bcbfd8d0af",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Continue Device readings",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "a7ab779c518cf1f2"
            ]
        ]
    },
    {
        "id": "fc83bd0b358f2c44",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "Save Settings to file in",
        "links": [
            "abdd37c2f412350b",
            "2aa20fd7e206759f",
            "6ade9e39ae541696",
            "4bab782ef6b8962f"
        ],
        "x": 855,
        "y": 340,
        "wires": [
            [
                "d69ea66c02bf4a9f"
            ]
        ]
    },
    {
        "id": "d3aa6fd2c11c5ba5",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Pause Device Readings out",
        "links": [
            "646fa4e3e8a44ef2"
        ],
        "x": 395,
        "y": 480,
        "wires": []
    },
    {
        "id": "2aa20fd7e206759f",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Save config file out",
        "links": [
            "fc83bd0b358f2c44"
        ],
        "x": 775,
        "y": 480,
        "wires": []
    },
    {
        "id": "a7ab779c518cf1f2",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Continue Devie Readings out",
        "links": [
            "646fa4e3e8a44ef2"
        ],
        "x": 1175,
        "y": 520,
        "wires": []
    },
    {
        "id": "8541bf8d6f84f1ee",
        "type": "inject",
        "z": "fc714a7ef7d3c130",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "d3c71911d85858bf"
            ]
        ]
    },
    {
        "id": "d3c71911d85858bf",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Archive Pulse",
        "func": "var device = global.get('device');\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= device.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "34c3c3d0e79bb93a"
            ]
        ]
    },
    {
        "id": "34c3c3d0e79bb93a",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Archive Pulse Out",
        "links": [
            "646fa4e3e8a44ef2"
        ],
        "x": 475,
        "y": 780,
        "wires": []
    },
    {
        "id": "68b6d779d98136e6",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Reset Out",
        "links": [
            "9e31e2d0e1f93536"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "9e31e2d0e1f93536",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "Reset in",
        "links": [
            "68b6d779d98136e6"
        ],
        "x": 55,
        "y": 1540,
        "wires": [
            [
                "b888285806aa88bd"
            ]
        ]
    },
    {
        "id": "5804018e81fd87a6",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Check ArchiveNow",
        "func": "var device = global.get(\"device\");\nvar resetArchiveNowMsg = null;\nif (device.archiveNow > 0) resetArchiveNowMsg = {topic:\"resetArchiveNow\", payload:true};\nreturn [msg,resetArchiveNowMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "4df443a2b491160c"
            ],
            [
                "7610bc5473940215"
            ]
        ]
    },
    {
        "id": "7610bc5473940215",
        "type": "delay",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1410,
        "y": 240,
        "wires": [
            [
                "1e43031a6c3c19fa"
            ]
        ]
    },
    {
        "id": "1e43031a6c3c19fa",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Reset ArchiveNow",
        "func": "global.get(\"device\").archiveNow = 0;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 240,
        "wires": []
    },
    {
        "id": "613c8f87295fc26b",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Save flow env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 900,
        "wires": []
    },
    {
        "id": "053889cc4e7fe020",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "Device Setting In",
        "mode": "link",
        "links": [
            "46746c283302f20c",
            "4d954311b75f11d2"
        ],
        "x": 315,
        "y": 340,
        "wires": []
    },
    {
        "id": "48b2aeeda28e07f5",
        "type": "inject",
        "z": "fc714a7ef7d3c130",
        "name": "pm2Name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "pm2Name",
        "payload": "PM2NAME",
        "payloadType": "env",
        "x": 130,
        "y": 900,
        "wires": [
            [
                "613c8f87295fc26b"
            ]
        ]
    },
    {
        "id": "5a4c5866bec23443",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Get pm2Name",
        "func": "msg.payload = global.get(\"pm2Name\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1460,
        "wires": [
            [
                "763e993c4a211e18"
            ]
        ]
    },
    {
        "id": "d103af9f4fac07c9",
        "type": "inject",
        "z": "fc714a7ef7d3c130",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "fe5d584150d52a78"
            ]
        ]
    },
    {
        "id": "fe5d584150d52a78",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Single Archive Pulse",
        "func": "var device = global.get('device');\ndevice.archiveNow = 1;\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 840,
        "wires": [
            [
                "34c3c3d0e79bb93a"
            ]
        ]
    },
    {
        "id": "5f6b6cb73aff0b66",
        "type": "mqtt in",
        "z": "fc714a7ef7d3c130",
        "name": "Subscribe DeviceA",
        "topic": "$(MQTTDEVICEA)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "4a32d6bc7f2733ad"
            ]
        ]
    },
    {
        "id": "4df443a2b491160c",
        "type": "mqtt out",
        "z": "fc714a7ef7d3c130",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "79250bf3.365cc4",
        "x": 1410,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9c722810201ae01",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Build Canvas",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 1;\nvar x32Array = [];\nvar x1Array = [];\nfor (var ii = 0; ii < 256; ++ii) \n{\n    x32Array[ii] = 0;\n    x1Array[ii]  = 0;\n}\nvar gainShift = 0;\nif (device.gain1.value > 0) gainShift = Math.ceil(device.gain1.value / 6.020599914);\nvar gainMult = 1;\nfor (ii = 0; ii < gainShift; ++ii) gainMult = gainMult * 2;\ngainMult = Math.exp(0.115129255 * device.gain1.value) / gainMult;\nif (gainMult >  1) gainMult =  1;\n\nx32Array[0] = Math.round(gainMult * 2147483647);\nif (x32Array[0] <  0)          x32Array[0] =  0;\nif (x32Array[0] >  2147483647) x32Array[0] =  2147483647;\n\nif (gainShift > 31) gainShift = 31;\nx32Array[5] = gainShift;\n\ngainShift = 0;\nif (device.gain2.value > 0) gainShift = Math.ceil(device.gain2.value / 6.020599914);\ngainMult = 1;\nfor (ii = 0; ii < gainShift; ++ii) gainMult = gainMult * 2;\ngainMult = Math.exp(0.115129255 * device.gain2.value) / gainMult;\nif (gainMult >  1) gainMult =  1;\n\nx32Array[8] = Math.round(gainMult * 2147483647);\nif (x32Array[8] <  0)          x32Array[8] =  0;\nif (x32Array[8] >  2147483647) x32Array[8] =  2147483647;\n\nif (gainShift > 31) gainShift = 31;\nx32Array[9] = gainShift;\n\nif (device.phaseShift.value < -180) device.gainMult.value = -180;\nif (device.phaseShift.value >  180) device.gainMult.value =  180;\nx32Array[1] = Math.round(Math.cos(device.phaseShift.value * Math.PI / 180.0) * 2147483647);\nx32Array[2] = Math.round(Math.sin(device.phaseShift.value * Math.PI / 180.0) * 2147483647);\nif (x32Array[1] < -2147483647) x32Array[1] = -2147483647;\nif (x32Array[1] >  2147483647) x32Array[1] =  2147483647;\nif (x32Array[2] < -2147483647) x32Array[2] = -2147483647;\nif (x32Array[2] >  2147483647) x32Array[2] =  2147483647;\n\nif (device.lowPassFilterShift.value < 1)  device.lowPassFilterShift.value = 1;\nif (device.lowPassFilterShift.value > 31) device.lowPassFilterShift.value = 31;\nx32Array[3] = Math.round(device.lowPassFilterShift.value);\nif (x32Array[3] < 1)  x32Array[3] = 1;\nif (x32Array[3] > 31) x32Array[3] = 31;\n\nif (device.derivativeStep.value < 1)   device.derivativeStep.value = 1;\nif (device.derivativeStep.value > 255) device.derivativeStep.value = 255;\nx32Array[4] = Math.round(device.derivativeStep.value);\nif (x32Array[4] < 1)   x32Array[4] = 1;\nif (x32Array[4] > 255) x32Array[4] = 255;\n\nif (device.limiterWindow1.value <  0)   device.limiterWindow1.value =  -device.limiterWindow1.value;\nif (device.limiterWindow1.value >  100) device.limiterWindow1.value =  100;\nx32Array[6] = Math.round(0.01 * device.limiterWindow1.value * 2147483647);\nif (x32Array[6] <  0)          x32Array[6] =  0;\nif (x32Array[6] >  2147483647) x32Array[6] =  2147483647;\nx32Array[7] = -x32Array[6];\n\nif (device.limiterWindow2.value <  0)   device.limiterWindow2.value =  -device.limiterWindow2.value;\nif (device.limiterWindow2.value >  100) device.limiterWindow2.value =  100;\nx32Array[10] = Math.round(0.01 * device.limiterWindow2.value * 2147483647);\nif (x32Array[10] <  0)          x32Array[10] =  0;\nif (x32Array[10] >  2147483647) x32Array[10] =  2147483647;\nx32Array[11] = -x32Array[10];\n\nif (device.systemOn.value != 0) device.systemOn.value = 1;\nx1Array[0] = 0;\nif (device.systemOn.value == 0) x1Array[0] = 1;\n\nif (device.highLevelOn1.value != 0) device.highLevelOn1.value = 1;\nx1Array[1] = 0;\nif (device.highLevelOn1.value == 0) x1Array[1] = 1;\n\nif (device.highLevelOn2.value != 0) device.highLevelOn2.value = 1;\nx1Array[2] = 0;\nif (device.highLevelOn2.value == 0) x1Array[2] = 1;\n\ndevice.lpfFreq.value = 1;\nfor (ii = 0; ii < device.lowPassFilterShift.value; ++ii) device.lpfFreq.value = device.lpfFreq.value * 2;\ndevice.lpfFreq.value = Math.round(125000000 / (device.lpfFreq.value * 8)) / 1000;\n\ndevice.notchFreq.value = Math.round(125000000 / (32 * device.derivativeStep.value)) / 1000;\nvar x32String = '';\nvar x1String = '';\n\nfor (var ii = 0; ii < 256; ++ii) \n{\n    x32String = x32String + ii.toString() + '   ' + x32Array[ii].toString() + '\\n';\n    x1String  = x1String + ii.toString()  + '   ' + x1Array[ii].toString() + '\\n';\n}\n\nreturn {topic: 'canvasData', payload:[{topic:'x32',payload:x32String,filename:'Canvas/x32Const.txt'}, {topic:'x1',payload:x1String,filename:'Canvas/x1Const.txt'}]};\n\n//INSTANCE NAME ORIGINAL           INSTANCE NAME PARSED\n//-----------------------------------------------------\n//clr ---------------------------> x1_const_0\n//HiLvlOff1 ---------------------> x1_const_1\n//HiLvlOff2 ---------------------> x1_const_2\n//gainMult1 ---------------------> x32_const_0\n//Imult -------------------------> x32_const_1\n//Qmult -------------------------> x32_const_2\n//lowPassFilterShift ------------> x32_const_3\n//delayCnt ----------------------> x32_const_4\n//gainShift1 --------------------> x32_const_5\n//UpLevel1 ----------------------> x32_const_6\n//LowLevel1 ---------------------> x32_const_7\n//gainMult2 ---------------------> x32_const_8\n//gainShift2 --------------------> x32_const_9\n//UpLevel2 ----------------------> x32_const_10\n//LowLevel2 ---------------------> x32_const_11\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 660,
        "wires": [
            [
                "cde9cf5a56126140"
            ]
        ]
    },
    {
        "id": "31e7ce1095d11005",
        "type": "file",
        "z": "fc714a7ef7d3c130",
        "name": "Write Canvas",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 660,
        "wires": [
            [
                "25171ce7fee9e7a9"
            ]
        ]
    },
    {
        "id": "cde9cf5a56126140",
        "type": "split",
        "z": "fc714a7ef7d3c130",
        "name": "Split x1, x2",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 660,
        "wires": [
            [
                "54e547fc6f1de3e3"
            ]
        ]
    },
    {
        "id": "54e547fc6f1de3e3",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Shift payload",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 660,
        "wires": [
            [
                "f02f2366b9985cfd"
            ]
        ]
    },
    {
        "id": "f02f2366b9985cfd",
        "type": "delay",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 660,
        "wires": [
            [
                "31e7ce1095d11005"
            ]
        ]
    },
    {
        "id": "25171ce7fee9e7a9",
        "type": "switch",
        "z": "fc714a7ef7d3c130",
        "name": "Wait for x1",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "x1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 660,
        "wires": [
            [
                "abc8e5305df13c09"
            ]
        ]
    },
    {
        "id": "abc8e5305df13c09",
        "type": "exec",
        "z": "fc714a7ef7d3c130",
        "command": "sudo ./canvas.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Write memory map",
        "x": 1170,
        "y": 660,
        "wires": [
            [
                "595cdde12112c2c3"
            ],
            [],
            []
        ]
    },
    {
        "id": "4d954311b75f11d2",
        "type": "link in",
        "z": "fc714a7ef7d3c130",
        "name": "Canvas Settings In",
        "links": [
            "5502095eee47e779",
            "053889cc4e7fe020"
        ],
        "x": 55,
        "y": 660,
        "wires": [
            [
                "c9c722810201ae01"
            ]
        ]
    },
    {
        "id": "4bab782ef6b8962f",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "",
        "mode": "link",
        "links": [
            "646fa4e3e8a44ef2",
            "fc83bd0b358f2c44"
        ],
        "x": 1455,
        "y": 660,
        "wires": []
    },
    {
        "id": "595cdde12112c2c3",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Test success",
        "func": "device = global.get('device');\ndevice.settingInProgress = 0;\nsettingSuccess = false;\nif (msg.rc.code == 0) settingSuccess = true;\nreturn {topic:\"settingSuccess\",payload:settingSuccess};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 660,
        "wires": [
            [
                "4bab782ef6b8962f"
            ]
        ]
    },
    {
        "id": "5502095eee47e779",
        "type": "link out",
        "z": "fc714a7ef7d3c130",
        "name": "init tray out",
        "mode": "link",
        "links": [
            "4d954311b75f11d2"
        ],
        "x": 1015,
        "y": 60,
        "wires": []
    },
    {
        "id": "6e3c2a40692c9615",
        "type": "function",
        "z": "fc714a7ef7d3c130",
        "name": "Create Setting",
        "func": "var device = global.get('device');\ndevice[msg.payload.attr].value = msg.payload.value;\ndevice.settingInProgress = 1;\nreturn {topic:'settingInProgress', payload:true};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 380,
        "wires": [
            [
                "053889cc4e7fe020",
                "5205ea3ffe7e0431"
            ]
        ]
    },
    {
        "id": "14c7747178216dd0",
        "type": "http in",
        "z": "b8a9252872fb4fd5",
        "name": "/apps",
        "url": "/apps",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 260,
        "wires": [
            [
                "bec2356f397fe6e7"
            ]
        ]
    },
    {
        "id": "bfabb79c9180cb91",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n    <div class='container' width=\"100%\">\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/blinky-rpmode0-dsp?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/basicYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">RP-Mode0 DSP {{{payload.deviceAName}}}</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "6720330d9e544805"
            ]
        ]
    },
    {
        "id": "83c8bcf70eb9e2e3",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "RP-Mode0-DSP",
        "output": "str",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "48f2d7d7920f5ca7"
            ]
        ]
    },
    {
        "id": "164f22e586fe1182",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "83c8bcf70eb9e2e3"
            ]
        ]
    },
    {
        "id": "48f2d7d7920f5ca7",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "basicYellow.png",
        "output": "str",
        "x": 670,
        "y": 260,
        "wires": [
            [
                "bfabb79c9180cb91"
            ]
        ]
    },
    {
        "id": "5b0ae431e03fc264",
        "type": "websocket in",
        "z": "b8a9252872fb4fd5",
        "name": "/blinky-rpmode0-dsp/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "468560f300303ae4"
            ]
        ]
    },
    {
        "id": "e78da0f27098db39",
        "type": "websocket out",
        "z": "b8a9252872fb4fd5",
        "name": "/blinky-rpmode0-dsp/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 830,
        "y": 720,
        "wires": []
    },
    {
        "id": "468560f300303ae4",
        "type": "link out",
        "z": "b8a9252872fb4fd5",
        "name": "Web socket out",
        "links": [
            "2f289f87.fe2ff",
            "c7f3b5bf.85c9a8",
            "09c2e8c5be726aa1"
        ],
        "x": 315,
        "y": 720,
        "wires": []
    },
    {
        "id": "9badb025c96f9f01",
        "type": "link in",
        "z": "b8a9252872fb4fd5",
        "name": "Web socket in",
        "links": [
            "1cdcbcd8.9514e3",
            "78ceea9e.d0b204",
            "7ac9b7947c52a846"
        ],
        "x": 635,
        "y": 720,
        "wires": [
            [
                "e78da0f27098db39"
            ]
        ]
    },
    {
        "id": "bb19d374447ac94d",
        "type": "inject",
        "z": "b8a9252872fb4fd5",
        "name": "project",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 460,
        "y": 60,
        "wires": [
            [
                "07eeef646a544d5e"
            ]
        ]
    },
    {
        "id": "07eeef646a544d5e",
        "type": "function",
        "z": "b8a9252872fb4fd5",
        "name": "Save global env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 60,
        "wires": []
    },
    {
        "id": "85bbbc94c80b9edc",
        "type": "http in",
        "z": "b8a9252872fb4fd5",
        "name": "/",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 200,
        "wires": [
            [
                "b022f943a8a4dd75"
            ]
        ]
    },
    {
        "id": "2cde678fb7cce2c6",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n",
        "output": "str",
        "x": 810,
        "y": 200,
        "wires": [
            [
                "442b832cdc12d085"
            ]
        ]
    },
    {
        "id": "8d2b6318b1568ccd",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "RP-Mode0-DSP",
        "output": "str",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "4c5f7bd582c219f9"
            ]
        ]
    },
    {
        "id": "b022f943a8a4dd75",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n            window.location = '/apps'\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 390,
        "y": 200,
        "wires": [
            [
                "8d2b6318b1568ccd"
            ]
        ]
    },
    {
        "id": "4c5f7bd582c219f9",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "basicYellow.png",
        "output": "str",
        "x": 670,
        "y": 200,
        "wires": [
            [
                "2cde678fb7cce2c6"
            ]
        ]
    },
    {
        "id": "975d7b647972ced9",
        "type": "inject",
        "z": "b8a9252872fb4fd5",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "4b5eca3e3b7efc22"
            ]
        ]
    },
    {
        "id": "4b5eca3e3b7efc22",
        "type": "function",
        "z": "b8a9252872fb4fd5",
        "name": "Init device name",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nflow.set(msg.topic + 'Props',deviceProps);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "bec2356f397fe6e7",
        "type": "function",
        "z": "b8a9252872fb4fd5",
        "name": "Device Names",
        "func": "msg.payload['deviceAName'] = flow.get('deviceAProps').name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "164f22e586fe1182"
            ]
        ]
    },
    {
        "id": "442b832cdc12d085",
        "type": "subflow:8341090a.df9758",
        "z": "b8a9252872fb4fd5",
        "name": "",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "6720330d9e544805",
        "type": "subflow:8341090a.df9758",
        "z": "b8a9252872fb4fd5",
        "name": "",
        "x": 950,
        "y": 260,
        "wires": []
    },
    {
        "id": "3a8abcf7f03a606c",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "numberAttrSetWidget",
        "field": "payload.script.numberAttrSetWidget",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        class NumberAttrSetWidget \n        {\n            constructor(deviceAttr, deviceLabel, labelWidth, inputWidth, buttonWidth)\n            {\n                this.labelWidth = labelWidth;\n                this.inputWidth = inputWidth;\n                this.buttonWidth = buttonWidth;\n                \n                this.deviceAttr = deviceAttr;\n                this.deviceLabel = deviceLabel;\n                this.changed = false;\n                this.project = null;\n                this.deviceType = null;\n                this.deviceName = null;\n            }\n            init(cardBodyContainer, deviceConfig)\n            {\n                this.project = deviceConfig.project;\n                this.deviceType = deviceConfig.deviceType;\n                this.deviceName = deviceConfig.name;\n\n                let settingRow  = document.createElement('div');\n                settingRow.setAttribute('class', 'row');\n\n                let labelSpan  = document.createElement('span');\n                labelSpan.setAttribute('class', 'card-text');\n                labelSpan.innerHTML = this.deviceLabel;\n\n                let labelColumn  = document.createElement('div');\n                labelColumn.setAttribute('class', 'col-md-' + this.labelWidth.toString());\n                labelColumn.setAttribute('align', 'left');\n                labelColumn.appendChild(labelSpan);\n                settingRow.appendChild(labelColumn);\n                \n                this.inputBox = document.createElement('input');\n                this.inputBox.setAttribute('class', 'big-text');\n                this.inputBox.setAttribute('type', 'text');\n                this.inputBox.setAttribute('value', '0');\n                this.inputBox.setAttribute('size', '8');\n                this.inputBox.oninput = event => {this.inputChange()};\n\n                let inputColumn  = document.createElement('div');\n                inputColumn.setAttribute('class', 'col-md-' + this.inputWidth.toString());\n                inputColumn.appendChild(this.inputBox);\n                settingRow.appendChild(inputColumn);\n\n                this.okButton = document.createElement('button');\n                this.okButton.setAttribute('class', 'btn btn-block card-button big-text');\n                this.okButton.innerHTML = '&#10003;';\n                this.okButton.onclick = event => {this.changeSetting()};\n                \n                let okButtonColumn  = document.createElement('div');\n                okButtonColumn.setAttribute('class', 'col-md-' + this.buttonWidth.toString());\n                okButtonColumn.appendChild(this.okButton);\n                settingRow.appendChild(okButtonColumn);\n                \n                cardBodyContainer.appendChild(settingRow);\n                this.showOkButton(false);\n                this.enableInput(false);\n            }\n\n            showOkButton(showButton)\n            {\n                if (showButton)\n                {\n                    this.okButton.style.display='block';\n                }\n                else\n                {\n                    this.okButton.style.display='none';\n                }\n            }\n            enableInput(enable)\n            { \n                this.inputBox.disabled = !enable;\n            }\n            inputChange()\n            {\n                this.changed = true;\n                this.showOkButton(true);\n            }\n            changeSetting()\n            {\n                this.showOkButton(false);\n                if (isNaN(this.inputBox.value))\n                {\n                    this.changed = false;\n                    return;\n                }\n                let payload = {'attr': this.deviceAttr, 'value':Number(this.inputBox.value)};\n                let actionMsg = \n                    {\n                        topic   : this.project + '/' +  this.deviceType + '/' +  this.deviceName + '/setting/setting',\n                        payload : payload\n                    };\n                sendActionMsg('setting','setting',actionMsg);\n                this.changed = false;\n            }\n            updateValue(device)\n            {\n                if (device.deviceType != this.deviceType) return;\n                if (device.name != this.deviceName) return;\n                \n                if (device.settingInProgress == 0)\n                {\n                    this.enableInput(true);\n                }\n                else\n                {\n                    this.enableInput(false);\n                }\n                if (!this.changed) this.inputBox.value = device[this.deviceAttr].value.toString();\n            }\n\n        }\n\n\n",
        "output": "str",
        "x": 680,
        "y": 880,
        "wires": [
            [
                "1f14954e7c434f95"
            ]
        ]
    },
    {
        "id": "b4e08476d15dbf79",
        "type": "http in",
        "z": "b8a9252872fb4fd5",
        "name": "/blinky-rpmode0-dsp",
        "url": "/blinky-rpmode0-dsp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "3acab4a89d6bad74"
            ]
        ]
    },
    {
        "id": "3acab4a89d6bad74",
        "type": "function",
        "z": "b8a9252872fb4fd5",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'blinky-rpmode0-dsp';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 880,
        "wires": [
            [
                "1e700446a8ccdef8"
            ]
        ]
    },
    {
        "id": "09eeb3e7db98e8f9",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "RP-Mode0-DSP {{{payload.script.name}}}",
        "output": "str",
        "x": 320,
        "y": 960,
        "wires": [
            [
                "3a8abcf7f03a606c"
            ]
        ]
    },
    {
        "id": "1f14954e7c434f95",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var appDeviceInfo = \n        {\n            config:\n            {\n                deviceType  : '{{{payload.script.deviceType}}}',\n                name        : '{{{payload.script.name}}}',\n                project     : '{{{payload.script.project}}}'\n            },\n            device: null\n        };\n        var archiveRequestList = [];\n        var archiveList = [];\n        var archiveList = [];\n        var pingInterval = 2000;\n        var lastPing = 0;        \n        var readings = \n        [\n            {deviceAttr:\"notchFreq\", label:\"Notch Freq.    (kHz)\"},\n            {deviceAttr:\"lpfFreq\",   label:\"Low Pass Freq. (kHz)\"}\n        ];\n        let settings = \n        [\n            new NumberAttrSetWidget(\"systemOn\",             \"System On\",        7, 3, 2),\n            new NumberAttrSetWidget(\"highLevelOn1\",         \"Hi Lvl 1 On\",      7, 3, 2),\n            new NumberAttrSetWidget(\"highLevelOn2\",         \"Hi Lvl 2 On\",      7, 3, 2),\n            new NumberAttrSetWidget(\"gain1\",                \"Gain 1 (dB)\",      7, 3, 2),\n            new NumberAttrSetWidget(\"gain2\",                \"Gain 2 (dB)\",      7, 3, 2),\n            new NumberAttrSetWidget(\"limiterWindow1\",       \"Window 1 (%)\",     7, 3, 2),\n            new NumberAttrSetWidget(\"limiterWindow2\",       \"Window 2 (%)\",     7, 3, 2),\n            new NumberAttrSetWidget(\"phaseShift\",           \"Phase (deg)\",      7, 3, 2),\n            new NumberAttrSetWidget(\"derivativeStep\",       \"Delay Step\",       7, 3, 2),\n            new NumberAttrSetWidget(\"lowPassFilterShift\",   \"Low Pass Step\",    7, 3, 2)\n        ];\n\n        function onDocumentReady()\n        {\n            let settingsCardBody = document.getElementById(\"settingsCardBody\");\n            for (let ii = 0; ii < settings.length; ++ii) settings[ii].init(settingsCardBody, appDeviceInfo.config);\n            createReadingsCard();\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            setInterval(ping, 1000);\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == appDeviceInfo.config.name) && (msg.mqttDevice.deviceType == appDeviceInfo.config.deviceType)  && (msg.mqttDevice.project == appDeviceInfo.config.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        appDeviceInfo.device = JSON.parse(msg.payload);\n                        for (let ii = 0; ii < settings.length; ++ii) settings[ii].updateValue(appDeviceInfo.device);\n                        updateReadings(appDeviceInfo.device);\n                        viewTransferFunction(appDeviceInfo.device.notchFreq.value * 1000, appDeviceInfo.device.lpfFreq.value * 1000);\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                        if ((msg.payload.device.deviceType == appDeviceInfo.config.deviceType) && (msg.payload.device.name == appDeviceInfo.config.name) )\n                            putArchiveValues(msg.payload);\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function ping()\n        {\n            {\n                if (appDeviceInfo.device != null)\n                {\n                    if (appDeviceInfo.device.settingInProgress == 1) return;\n                }\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }        \n        }\n        function reset(actionFlag)\n        {\n            var headerText = 'Warning';\n            var title = 'Resetting Tray';\n            var text = 'I hope you know what you are doing.';\n            var buttonTexts = ['Reset', 'Cancel'];\n            var buttonFunctions = \n            [\n                function()\n                {\n                    $( this ).dialog( \"close\" );\n                    var actionMsg = \n                        {\n                            topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/reset',\n                            payload : actionFlag\n                        };\n                    sendActionMsg('reset','setting',actionMsg);\n                 }, \n                function()\n                {\n                    $( this ).dialog( \"close\" );\n                }\n            ];\n            if (actionFlag == 2)\n            {\n                title = 'Rebooting Tray';\n                buttonTexts[0] = 'Reboot';\n            }\n            optionDialog(headerText, title, text, buttonTexts, buttonFunctions);\n            \n        }\n",
        "output": "str",
        "x": 650,
        "y": 920,
        "wires": [
            [
                "865a01f155f31651"
            ]
        ]
    },
    {
        "id": "ec9f5cf5ef3c56c1",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "script.editDevice",
        "field": "payload.script.editDevice",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Edit Device JavaScript\n       $( function() \n        {\n            $( \"#editDeviceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setDeviceConfig(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() \n                            {\n                                $( this ).dialog( \"close\" ); \n                            },\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function editDevice(attrName)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            editedAttribute = attrName;\n            $( \"#editDeviceDialogAttribute\").html(attrName);\n\n            var attr = appDeviceInfo.device[attrName];\n            $( \"#loloAlarm\").val(attr.alarm.limits.lolo);\n            $( \"#lowAlarm\").val(attr.alarm.limits.low);\n            $( \"#highAlarm\").val(attr.alarm.limits.high);\n            $( \"#hihiAlarm\").val(attr.alarm.limits.hihi);\n            $( \"#notifyName\").val(attr.alarm.notify.name);\n            $( \"#notifyNumber\").val(attr.alarm.notify.number);\n\n            $( \"#editDeviceDialog\" ).dialog( \"open\" );\n        }\n        function setDeviceConfig()\n        {\n            var attr = appDeviceInfo.device[editedAttribute];\n            if (isNaN($('#loloAlarm').val()) \n                || isNaN($('#lowAlarm').val()) \n                || isNaN($('#highAlarm').val()) \n                || isNaN($('#hihiAlarm').val()))\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', editedAttribute);\n                editedAttribute = '';\n                return;\n            }\n            editedAttribute = '';\n\n            attr.alarm.limits.lolo = Number($( \"#loloAlarm\").val());\n            attr.alarm.limits.low = Number($( \"#lowAlarm\").val());\n            attr.alarm.limits.high = Number($( \"#highAlarm\").val());\n            attr.alarm.limits.hihi = Number($( \"#hihiAlarm\").val());\n            attr.alarm.notify.number =  $( \"#notifyNumber\").val();\n            attr.alarm.notify.name = $( \"#notifyName\").val();\n            var actionMsg = \n                {\n                    topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/config',\n                    payload : appDeviceInfo.device\n                };\n            sendActionMsg('config','setting',actionMsg);\n        }\n",
        "output": "str",
        "x": 660,
        "y": 1040,
        "wires": [
            [
                "05dce89dd62e9516"
            ]
        ]
    },
    {
        "id": "29670eaef40128f0",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Custom Javascript\n{{{payload.script.numberAttrSetWidget}}}\n{{{payload.script.global}}}\n{{{payload.script.transferFunction}}}\n{{{payload.script.settingsReadings}}}\n{{{payload.script.editDevice}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 640,
        "y": 1120,
        "wires": [
            [
                "fd05ec0a7d29b573"
            ]
        ]
    },
    {
        "id": "80952ec14b2b26fb",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- body HTML -->\n    <div width=\"100%\">\n{{{payload.html.dashboard}}}\n{{{payload.html.control}}}\n{{{payload.html.timePlot}}}\n{{{payload.html.archive}}}\n{{{payload.html.user}}}\n{{{payload.html.wifimon}}}\n{{{payload.html.reset}}}\n    </div>",
        "output": "str",
        "x": 950,
        "y": 1000,
        "wires": [
            [
                "de09c957a3da801d"
            ]
        ]
    },
    {
        "id": "1e700446a8ccdef8",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "basicYellow.png",
        "output": "str",
        "x": 330,
        "y": 920,
        "wires": [
            [
                "09eeb3e7db98e8f9"
            ]
        ]
    },
    {
        "id": "f9f42b7c1047fb39",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- user HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 960,
        "y": 920,
        "wires": [
            [
                "95950b99cb540c85"
            ]
        ]
    },
    {
        "id": "05dce89dd62e9516",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// User Javascript\n        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "29670eaef40128f0"
            ]
        ]
    },
    {
        "id": "95950b99cb540c85",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "html.reset",
        "field": "payload.html.reset",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- reset HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n                <div class='card' id='reset'>\n                    <div class='card-body' align=\"center\">\n                         <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='resetButton' onclick=\"reset(1)\" >Reset</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='rebootButton' onclick=\"reset(2)\" >Reboot</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 960,
        "y": 960,
        "wires": [
            [
                "80952ec14b2b26fb"
            ]
        ]
    },
    {
        "id": "fd05ec0a7d29b573",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div id='readingsCard' class='card'></div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <table width=\"100%\">\n                        <tr>\n                            <td width=\"15%\"></td>\n                            <td width=\"70%\">\n                                <span class='card-title' id='archiveCardTitleId'>Transfer Function</span>\n                            </td>\n                            <td width=\"15%\">\n                                 <button class='btn btn-block card-button' id=\"toggleTransferButtonId\" onclick=\"toggleTransferView()\" >Toggle View</button>\n                            </td>\n                        </tr>\n                    </table>\n                    <div class='card-body' align=\"center\">\n                        <div id=\"transferFunctionChart\" width=\"100%\" ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <p class='card-title' >Settings</p>\n                    <div id=\"settingsCardBody\" class='card-body' align=\"center\"></div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div id='settingsCard' class='card'></div>\n                <div id=\"editDeviceDialog\" title=\"Edit Device\" class='card'>\n                    <p class='card-title' id='editDeviceDialogAttribute'>Attribute</p>\n                    <div class='card-body'>\n                        <table>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LoLo</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"loloAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LOW</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"lowAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HIGH</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"highAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HiHi</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"hihiAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Name</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyName\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Number</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyNumber\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 980,
        "y": 880,
        "wires": [
            [
                "f9f42b7c1047fb39"
            ]
        ]
    },
    {
        "id": "5b652b6153978bc3",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "script.settingsReadings",
        "field": "payload.script.settingsReadings",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Update Readings Javascript\n        function updateReadings(device)\n        {\n            if (device.settingInProgress == 0)\n            {\n                enableSettings(true);\n            }\n            else\n            {\n                enableSettings(false);\n            }\n            for (var ii = 0; ii < settings.length; ++ii)\n            {\n                if (!settings[ii].changed) $('#setting' + ii.toString() + 'InputId').val(device[settings[ii].deviceAttr].value.toString()); \n            }\n            for (var ii = 0; ii < readings.length; ++ii)\n            {\n                $('#reading' + ii.toString() + 'Id').text(device[readings[ii].deviceAttr].value.toString()); \n            }\n\n        }\n        function showSettingChangedButton(settingIndex, showButton)\n        {\n            if (showButton)\n            {\n                $('#setting' + settingIndex.toString() + 'ButtonId').show();\n            }\n            else\n            {\n                $('#setting' + settingIndex.toString() + 'ButtonId').hide();\n            }\n        }\n        function showEditDeviceButton(readingIndex, showButton)\n        {\n            if (showButton)\n            {\n                $('#reading' + readingIndex.toString() + 'ButtonId').show();\n            }\n            else\n            {\n                $('#reading' + readingIndex.toString() + 'ButtonId').hide();\n            }\n        }\n        function showEditDeviceButtons(showButton)\n        {\n            for (var ii = 0; ii < readings.length; ++ii) showEditDeviceButton(ii, showButton);\n            \n        }\n        function enableSetting(settingIndex,enable)\n        { \n            $('#setting' + settingIndex.toString() + 'InputId').attr('disabled',!enable);\n            \n        }\n        function showSettingsChangedButton(showButton)\n        {\n            for (var ii = 0; ii < settings.length; ++ii) showSettingChangedButton(ii, showButton);\n            \n        }\n        function enableSettings(enable) \n        {   \n            for (var ii = 0; ii < settings.length; ++ii) enableSetting(ii,enable);\n            showEditDeviceButtons(enable);\n\n        }\n        function settingChange(settingIndex)\n        {\n            settings[settingIndex].changed = true;\n            $('#setting' + settingIndex.toString() + 'ButtonId').show();\n        }\n        function changeSetting(settingIndex)\n        {\n            $('#setting' + settingIndex.toString() + 'ButtonId').hide();\n            if (isNaN($('#setting' + settingIndex.toString() + 'InputId').val()))\n            {\n                settings[settingIndex].changed = false;\n                return;\n            }\n            var payload = {'attr': settings[settingIndex].deviceAttr, 'value':Number($('#setting' + settingIndex.toString() + 'InputId').val())};\n            sendSetting(payload);\n            settings[settingIndex].changed = false;\n        }\n        function createSettingsCard()\n        {\n            let table = document.createElement('table');\n                table.setAttribute('width', '100%');\n            for (var ii = 0; ii < settings.length; ++ii)\n            {\n                var row = document.createElement('tr');\n                    var td1 = document.createElement('td');\n                        td1.setAttribute('width', '60%');\n                        var span1 = document.createElement('span');\n                            span1.innerHTML = settings[ii].label;\n                            span1.setAttribute('class', 'card-text');\n                        td1.appendChild(span1);\n                    row.appendChild(td1);\n                    var td2 = document.createElement('td');\n                        td2.setAttribute('width', '20%');\n                        var input1 = document.createElement('input');\n                            input1.setAttribute('id', 'setting' + ii.toString() + 'InputId');\n                            input1.setAttribute('class', 'big-text');\n                            input1.setAttribute('type', 'text');\n                            input1.setAttribute('value', '0');\n                            input1.setAttribute('size', '8');\n                            input1.setAttribute('oninput', 'settingChange(' + ii.toString() + ')');\n                        td2.appendChild(input1);\n                    row.appendChild(td2);\n                    var td3 = document.createElement('td');\n                        td3.setAttribute('width', '20%');\n                        var button1 = document.createElement('button');\n                            button1.setAttribute('id', 'setting' + ii.toString() + 'ButtonId');\n                            button1.setAttribute('class', 'btn btn-block card-button big-text');\n                            button1.setAttribute('onclick', 'changeSetting(' + ii.toString() + ')');\n                            button1.innerHTML = '&#10003;';\n                        td3.appendChild(button1);\n                    row.appendChild(td3);\n                table.appendChild(row);\n            }\n            let rowDiv = document.createElement('div');\n                rowDiv.setAttribute('class','row');\n                rowDiv.setAttribute('style','padding-top: 0px;');\n                rowDiv.appendChild(table);\n            let cardBodyDiv = document.createElement('div');\n                cardBodyDiv.setAttribute('class','card-body');\n                cardBodyDiv.setAttribute('align','center');\n                cardBodyDiv.appendChild(rowDiv);\n            let cardTitle = document.createElement('p');\n                cardTitle.setAttribute('class','card-title');\n                cardTitle.innerHTML = 'Settings';\n            document.getElementById('settingsCard').appendChild(cardTitle);\n            document.getElementById('settingsCard').appendChild(cardBodyDiv);\n            showSettingsChangedButton(false);\n            enableSettings(false);\n        }\n        function createReadingsCard()\n        {\n            let table = document.createElement('table');\n                table.setAttribute('width', '100%');\n            for (var ii = 0; ii < readings.length; ++ii)\n            {\n                var row = document.createElement('tr');\n                    var td1 = document.createElement('td');\n                        td1.setAttribute('width', '60%');\n                        var span1 = document.createElement('span');\n                            span1.innerHTML = readings[ii].label;\n                            span1.setAttribute('class', 'card-text');\n                        td1.appendChild(span1);\n                    row.appendChild(td1);\n                    var td2 = document.createElement('td');\n                        td2.setAttribute('width', '20%');\n                        var span2 = document.createElement('span');\n                            span2.setAttribute('class', 'card-text');\n                            span2.setAttribute('id', 'reading' + ii.toString() + 'Id');\n                            span2.innerHTML = '?';\n                        td2.appendChild(span2);\n                    row.appendChild(td2);\n                    var td3 = document.createElement('td');\n                        td3.setAttribute('width', '20%');\n                        var button1 = document.createElement('button');\n                            button1.setAttribute('class', 'btn btn-block card-button big-text');\n                            button1.setAttribute('id', 'reading' + ii.toString() + 'ButtonId');\n                            button1.setAttribute('onclick', 'editDevice(\"' + readings[ii].deviceAttr + '\")');\n                            button1.innerHTML = 'Edit';\n                        td3.appendChild(button1);\n                    row.appendChild(td3);\n                table.appendChild(row);\n            }\n            let rowDiv = document.createElement('div');\n                rowDiv.setAttribute('class','row');\n                rowDiv.setAttribute('style','padding-top: 0px;');\n                rowDiv.appendChild(table);\n            let cardBodyDiv = document.createElement('div');\n                cardBodyDiv.setAttribute('class','card-body');\n                cardBodyDiv.setAttribute('align','center');\n                cardBodyDiv.appendChild(rowDiv);\n            let cardTitle = document.createElement('p');\n                cardTitle.setAttribute('class','card-title');\n                cardTitle.innerHTML = 'Readings';\n            document.getElementById('readingsCard').appendChild(cardTitle);\n            document.getElementById('readingsCard').appendChild(cardBodyDiv);\n            showEditDeviceButtons(false);\n        }\n        function sendSetting(payload)\n        {\n            var actionMsg = \n                {\n                    topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/setting',\n                    payload : payload\n                };\n            sendActionMsg('setting','setting',actionMsg);\n        }\n",
        "output": "str",
        "x": 690,
        "y": 1000,
        "wires": [
            [
                "ec9f5cf5ef3c56c1"
            ]
        ]
    },
    {
        "id": "de09c957a3da801d",
        "type": "subflow:8341090a.df9758",
        "z": "b8a9252872fb4fd5",
        "name": "",
        "x": 1190,
        "y": 1000,
        "wires": []
    },
    {
        "id": "865a01f155f31651",
        "type": "template",
        "z": "b8a9252872fb4fd5",
        "name": "script.transferFunction",
        "field": "payload.script.transferFunction",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var transferFunctionView = 0;\n        function viewTransferFunction(fnotch, flpf)\n        {\n            if (transferFunctionView == 0)\n            {\n                magPhasetransferFunctionPlot(fnotch, flpf);\n            }\n            if (transferFunctionView == 1)\n            {\n                realImagtransferFunctionPlot(fnotch, flpf);\n            }\n            \n        }\n        function toggleTransferView()\n        {\n            transferFunctionView = transferFunctionView + 1;\n            if (transferFunctionView > 1) transferFunctionView = 0;\n            if (appDeviceInfo.device != null) viewTransferFunction(appDeviceInfo.device.notchFreq.value * 1000, appDeviceInfo.device.lpfFreq.value * 1000);\n\n            \n        }\n        function transferFunction(freq, fnotch, flpf)\n        {\n            let thetaNotch = 2.0 * Math.PI * freq / fnotch;\n            let thetaLpf = freq / flpf;\n            let lpfDenom = 1.0 + thetaLpf * thetaLpf;\n            let notchReal = (1.0 - Math.cos(thetaNotch));\n            let notchImag = Math.sin(thetaNotch);\n            let lpfReal = 1.0 / lpfDenom;\n            let lpfImag = -thetaLpf / lpfDenom;\n            let tfReal = notchReal * lpfReal - notchImag * lpfImag;\n            let tfImag = notchImag * lpfReal + notchReal * lpfImag;\n            return [tfReal,tfImag];\n        }\n        function magPhasetransferFunctionPlot(fnotch, flpf)\n        {\n            let nptsPerDecade = 100;\n            let startDecade = 2;\n            let stopDecade = 5;\n            let layout =\n            {\n                showlegend  : true,\n                legend      : \n                { \n                    x: 0, y: 1.15,\n                    font: {size:20}\n                },\n                height      : '600',\n                width       : '',\n                xaxis       :\n                {\n                    type            : 'log',\n                    autorange       : true,\n                    tickangle       : '0',\n                    tickfont        : {size: 30}\n                },\n                yaxis:\n                {\n                    title           : 'Gain (dB)',\n                    titlefont       : {color: '#557a95',size: 30},\n                    tickfont        : {color: '#557a95',size: 30},\n                    gridcolor       : '#beceda',\n                    zerolinecolor   : '#beceda',\n                    linecolor       : '#beceda',\n                    range: [-40, 0],\n                    dtick: 5\n                },\n                yaxis2:\n                {\n                    title           : 'Phase (deg)',\n                    titlefont       : {color: '#569556',size: 30},\n                    tickfont        : {color: '#569556',size: 30},\n                    gridcolor       : '#beceda',\n                    zerolinecolor   : '#beceda',\n                    linecolor       : '#beceda',\n                    overlaying: 'y',\n                    side: 'right',\n                    range: [-180, 180],\n                    dtick: 45\n                },\n    \n                margin: \n                {\n                    t: 30, //top margin\n                    l: 150, //left margin\n                    r: 150, //right margin\n                    b: 100 //bottom margin\n                },\n            };\n            magTrace = \n            {\n                x: [],\n                y: [],\n                name: 'Gain (dB)',\n                yaxis: 'y1',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'blue'}\n            };\n            phaseTrace = \n            {\n                x: [],\n                y: [],\n                name: 'Phase (deg)',\n                yaxis: 'y2',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'green'}\n            };\n            let ln10 = Math.log(10.0);\n            for (var id = startDecade; id < stopDecade; ++id)\n            {\n                for (var ip = 0; ip < nptsPerDecade; ++ip)\n                {\n                    let freq = Math.exp((id + ip / nptsPerDecade) * ln10);\n                    let tf = transferFunction(freq, fnotch, flpf);\n                    magTrace.x.push(freq);\n                    magTrace.y.push(10.0 * Math.log10(tf[0] * tf[0] + tf[1] * tf[1]));\n                    phaseTrace.x.push(freq);\n                    phaseTrace.y.push(180.0 * Math.atan2(tf[1],tf[0]) / Math.PI);\n                }\n            }    \n            Plotly.newPlot(\"transferFunctionChart\", [magTrace, phaseTrace], layout);\n            \n        }\n        function realImagtransferFunctionPlot(fnotch, flpf)\n        {\n            let nptsPerDecade = 100;\n            let startDecade = 2;\n            let stopDecade = 5;\n            let layout =\n            {\n                showlegend  : true,\n                legend      : \n                { \n                    x: 0, y: 1.15,\n                    font: {size:20}\n                },\n                height      : '600',\n                width       : '',\n                xaxis       :\n                {\n                    type            : 'log',\n                    autorange       : true,\n                    tickangle       : '0',\n                    tickfont        : {size: 30}\n                },\n                yaxis:\n                {\n                    title           : 'Gain ',\n                    titlefont       : {color: '#557a95',size: 30},\n                    tickfont        : {color: '#557a95',size: 30},\n                    gridcolor       : '#beceda',\n                    zerolinecolor   : '#beceda',\n                    linecolor       : '#beceda'\n//                    range: [-1, 1],\n//                    dtick: 0.2\n                },\n\n                margin: \n                {\n                    t: 30, //top margin\n                    l: 150, //left margin\n                    r: 150, //right margin\n                    b: 100 //bottom margin\n                },\n            };\n            realTrace = \n            {\n                x: [],\n                y: [],\n                name: 'Real',\n                yaxis: 'y1',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'blue'}\n            };\n            imagTrace = \n            {\n                x: [],\n                y: [],\n                name: 'Imag',\n                yaxis: 'y1',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'green'}\n            };\n            let ln10 = Math.log(10.0);\n            for (var id = startDecade; id < stopDecade; ++id)\n            {\n                for (var ip = 0; ip < nptsPerDecade; ++ip)\n                {\n                    let freq = Math.exp((id + ip / nptsPerDecade) * ln10);\n                    let tf = transferFunction(freq, fnotch, flpf);\n                    realTrace.x.push(freq);\n                    realTrace.y.push(tf[0]);\n                    imagTrace.x.push(freq);\n                    imagTrace.y.push(tf[1]);\n                }\n            }    \n            Plotly.newPlot(\"transferFunctionChart\", [realTrace, imagTrace], layout);\n            \n        }\n        function toggleArchive()\n        {\n            switch (archiveView)\n            {\n                case 0:\n                    plotWeekly();\n                    break;\n                case 1:\n                    plotMonthly();\n                    break;\n                case 2:\n                    plotDaily();\n                    break;\n            }\n        }\n",
        "output": "str",
        "x": 680,
        "y": 960,
        "wires": [
            [
                "5b652b6153978bc3"
            ]
        ]
    }
]